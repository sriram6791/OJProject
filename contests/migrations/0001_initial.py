# Generated by Django 5.2.3 on 2025-07-04 09:54

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('problems', '0002_delete_submission'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the contest', max_length=255, unique=True)),
                ('description', models.TextField(help_text='Detailed description of the contest')),
                ('start_time', models.DateTimeField(help_text='The official start time of the contest')),
                ('end_time', models.DateTimeField(help_text='The official end time of the contest')),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('active', 'Active'), ('ended', 'Ended'), ('cancelled', 'Cancelled')], default='upcoming', help_text='Current status of the contest', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this contest', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_contests', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(blank=True, help_text='Users who have registered or participated in this contest', related_name='contests_participated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contest',
                'verbose_name_plural': 'Contests',
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='ContestProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(default=100, help_text='Points awarded for solving this problem in this contest')),
                ('order_in_contest', models.IntegerField(help_text='The display order of the problem within the contest')),
                ('contest', models.ForeignKey(help_text='The contest this problem belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='contest_problems', to='contests.contest')),
                ('problem', models.ForeignKey(help_text='The problem itself', on_delete=django.db.models.deletion.CASCADE, related_name='contest_instances', to='problems.problem')),
            ],
            options={
                'verbose_name': 'Contest Problem',
                'verbose_name_plural': 'Contest Problems',
                'ordering': ['contest', 'order_in_contest'],
                'unique_together': {('contest', 'order_in_contest'), ('contest', 'problem')},
            },
        ),
        migrations.AddField(
            model_name='contest',
            name='problems',
            field=models.ManyToManyField(help_text='Problems included in this contest', related_name='contests', through='contests.ContestProblem', to='problems.problem'),
        ),
        migrations.CreateModel(
            name='ContestSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of the submission')),
                ('code', models.TextField(help_text='The submitted code')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('wrong_answer', 'Wrong Answer'), ('time_limit_exceeded', 'Time Limit Exceeded'), ('runtime_error', 'Runtime Error'), ('compilation_error', 'Compilation Error'), ('memory_limit_exceeded', 'Memory Limit Exceeded'), ('judging_error', 'Judging Error')], default='pending', help_text='Status of the submission after judging', max_length=25)),
                ('score', models.IntegerField(default=0, help_text='Score obtained for this submission')),
                ('test_cases_passed', models.IntegerField(default=0, help_text='Number of test cases passed')),
                ('total_test_cases', models.IntegerField(default=0, help_text='Total number of test cases')),
                ('judge_output', models.TextField(blank=True, help_text='Output/error messages from the judge', null=True)),
                ('contest_problem', models.ForeignKey(help_text='The problem instance within a contest for which this submission was made', on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='contests.contestproblem')),
                ('participant', models.ForeignKey(help_text='The user who submitted the solution', on_delete=django.db.models.deletion.CASCADE, related_name='contest_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contest Submission',
                'verbose_name_plural': 'Contest Submissions',
                'ordering': ['-submitted_at'],
            },
        ),
    ]
