from django.shortcuts import render, get_object_or_404, redirect
from django.views import View
from django.db.models import Q
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.utils import timezone
from datetime import timedelta
from django.contrib import messages # Import messages for feedback
from django.contrib.auth.decorators import login_required # For function-based views
from django.utils.decorators import method_decorator # For class-based views with decorators
from django.contrib.auth.mixins import LoginRequiredMixin
from .models import Contest, ContestProblem, ContestSubmission # Import ContestProblem, ContestSubmission
from .forms import ContestForm, ContestProblemFormSet
from django.conf import settings # Needed if you access settings like AUTH_USER_MODEL directly
from problems.models import Problem
from problems.views import ProblemSetterRequiredMixin

class CreateContestView(ProblemSetterRequiredMixin, View):
    """
    View for creating a new contest
    """
    def get(self, request):
        form = ContestForm()
        
        return render(request, 'contests/create.html', {
            'form': form,
            'title': 'Create Contest'
        })
    
    def post(self, request):
        form = ContestForm(request.POST)
        
        if form.is_valid():
            contest = form.save(commit=False)
            contest.created_by = request.user
            contest.save()
            
            messages.success(request, f"Contest '{contest.name}' created successfully! Now add problems to it.")
            return redirect('contests:edit_problems', pk=contest.id)
        
        return render(request, 'contests/create.html', {
            'form': form,
            'title': 'Create Contest'
        })


class EditContestView(ProblemSetterRequiredMixin, View):
    """
    View for editing contest details
    """
    def get(self, request, pk):
        contest = get_object_or_404(Contest, pk=pk)
        
        # Check if user is creator or admin
        if contest.created_by != request.user and request.user.role != 'admin':
            messages.error(request, "You don't have permission to edit this contest.")
            return redirect('contests:detail', pk=contest.id)
            
        form = ContestForm(instance=contest)
        
        return render(request, 'contests/edit.html', {
            'form': form,
            'contest': contest,
            'title': f'Edit Contest: {contest.name}'
        })
    
    def post(self, request, pk):
        contest = get_object_or_404(Contest, pk=pk)
        
        # Check if user is creator or admin
        if contest.created_by != request.user and request.user.role != 'admin':
            messages.error(request, "You don't have permission to edit this contest.")
            return redirect('contests:detail', pk=contest.id)
            
        form = ContestForm(request.POST, instance=contest)
        
        if form.is_valid():
            form.save()
            messages.success(request, f"Contest '{contest.name}' updated successfully!")
            return redirect('contests:detail', pk=contest.id)
        
        return render(request, 'contests/edit.html', {
            'form': form,
            'contest': contest,
            'title': f'Edit Contest: {contest.name}'
        })


class EditContestProblemsView(ProblemSetterRequiredMixin, View):
    """
    View for editing the problems in a contest
    """
    def get(self, request, pk):
        contest = get_object_or_404(Contest, pk=pk)
        
        # Check if user is creator or admin
        if contest.created_by != request.user and request.user.role != 'admin':
            messages.error(request, "You don't have permission to edit this contest.")
            return redirect('contests:detail', pk=contest.id)
        
        # Get existing problems or initialize an empty formset
        formset = ContestProblemFormSet(
            queryset=ContestProblem.objects.filter(contest=contest).order_by('order_in_contest')
        )
        
        return render(request, 'contests/edit_problems.html', {
            'contest': contest,
            'formset': formset,
            'title': f'Edit Problems: {contest.name}'
        })
    
    def post(self, request, pk):
        contest = get_object_or_404(Contest, pk=pk)
        
        # Check if user is creator or admin
        if contest.created_by != request.user and request.user.role != 'admin':
            messages.error(request, "You don't have permission to edit this contest.")
            return redirect('contests:detail', pk=contest.id)
        
        formset = ContestProblemFormSet(
            request.POST,
            queryset=ContestProblem.objects.filter(contest=contest)
        )
        
        if formset.is_valid():
            problems = formset.save(commit=False)
            
            # Process problem assignments
            for i, problem in enumerate(problems):
                problem.contest = contest
                problem.order_in_contest = i + 1  # Set ordering based on form order
                problem.save()
            
            # Handle deletions
            for obj in formset.deleted_objects:
                obj.delete()
            
            messages.success(request, f"Problems for '{contest.name}' updated successfully!")
            return redirect('contests:detail', pk=contest.id)
        
        return render(request, 'contests/edit_problems.html', {
            'contest': contest,
            'formset': formset,
            'title': f'Edit Problems: {contest.name}'
        })


class ContestListView(View):
    """
    Displays a list of all contests, with search and pagination.
    """
    def get(self, request, *args, **kwargs):
        contests_list = Contest.objects.all()

        query = request.GET.get('q')
        if query:
            contests_list = contests_list.filter(
                Q(name__icontains=query) |
                Q(description__icontains=query)
            ).distinct()

        paginator = Paginator(contests_list, 9)
        page_number = request.GET.get('page')
        
        try:
            contests = paginator.page(page_number)
        except PageNotAnInteger:
            contests = paginator.page(1)
        except EmptyPage:
            contests = paginator.page(paginator.num_pages)

        context = {
            'contests': contests,
            'query': query,
        }
        return render(request, 'contests/list.html', context)


class ContestDetailView(View):
    """
    Shows the details of a specific contest, its problems, and registration status.
    """
    def get(self, request, pk, *args, **kwargs):
        contest = get_object_or_404(Contest, pk=pk)
        
        # Get problems associated with this contest
        problems = ContestProblem.objects.filter(contest=contest).order_by('order_in_contest')
        
        # Check if user is registered for this contest
        is_registered = False
        if request.user.is_authenticated:
            is_registered = contest.participants.filter(pk=request.user.pk).exists()
        
        context = {
            'contest': contest,
            'problems': problems,
            'is_registered': is_registered,
            'now': timezone.now(),  # For displaying time remaining
        }
        return render(request, 'contests/detail.html', context)


class ContestRegisterView(View):
    """
    Handles registration for a contest
    """
    @method_decorator(login_required)
    def post(self, request, pk, *args, **kwargs):
        contest = get_object_or_404(Contest, pk=pk)
        
        # Check if registration is open
        if not contest.is_registration_open():
            messages.error(request, f"Registration for '{contest.name}' is closed.")
            return redirect('contests:detail', pk=pk)
        
        # Check if user is already registered
        if contest.participants.filter(pk=request.user.pk).exists():
            messages.info(request, f"You are already registered for '{contest.name}'.")
        else:
            # Register the user
            contest.participants.add(request.user)
            messages.success(request, f"You have successfully registered for '{contest.name}'.")
        
        return redirect('contests:detail', pk=pk)


class ContestLeaderboardView(View):
    """
    Displays the leaderboard for a contest
    """
    def get(self, request, pk, *args, **kwargs):
        contest = get_object_or_404(Contest, pk=pk)
        
        # Get all submissions for this contest
        submissions = ContestSubmission.objects.filter(
            contest_problem__contest=contest
        ).select_related('participant', 'contest_problem')
        
        # Aggregate data by user
        leaderboard_data = []
        user_data = {}
        
        for sub in submissions:
            user_id = sub.participant.id
            problem_id = sub.contest_problem.problem.id
            
            if user_id not in user_data:
                user_data[user_id] = {
                    'username': sub.participant.username,
                    'solved_problems': set(),
                    'total_count': 0,
                    'last_submission_time': sub.submitted_at
                }
            
            # Count solved problems
            if sub.final_verdict == 'accepted':
                user_data[user_id]['solved_problems'].add(problem_id)
            
            # Update total submission count
            user_data[user_id]['total_count'] += 1
            
            # Update last submission time if this is more recent
            if sub.submitted_at > user_data[user_id]['last_submission_time']:
                user_data[user_id]['last_submission_time'] = sub.submitted_at
        
        # Convert to list for sorting
        for user_id, entry in user_data.items():
            leaderboard_data.append({
                'username': entry['username'],
                'problems_solved': len(entry['solved_problems']),
                'total_submissions': entry['total_count'],
                'last_submission_time': entry['last_submission_time']
            })
        
        # Sort by problems solved (desc), then by submission time (asc)
        leaderboard_data.sort(
            key=lambda x: (-x['problems_solved'], x['last_submission_time'])
        )
        
        context = {
            'contest': contest,
            'leaderboard_data': leaderboard_data,
        }
        return render(request, 'contests/contest_leaderboard.html', context)


@method_decorator(login_required, name='dispatch')
class ContestProblemSolveView(View):
    """
    Displays the contest problem solving interface.
    Includes contest problems list, current problem statement, and submission area.
    """
    def get(self, request, pk, problem_pk=None, *args, **kwargs):
        contest = get_object_or_404(Contest, pk=pk)

        # Check if the user is a participant
        if not contest.participants.filter(pk=request.user.pk).exists():
            messages.warning(request, f"You must be registered for '{contest.name}' to access its problems.")
            return redirect('contests:detail', pk=pk)
        
        # Check if the contest is active
        if not contest.is_active():
            # If contest is not active, but has ended, allow viewing problems/submissions
            if contest.is_ended():
                messages.info(request, f"'{contest.name}' has ended. You can review problems and your past submissions.")
            else: # Upcoming or Cancelled
                messages.error(request, f"'{contest.name}' is not active yet. Please wait for the contest to start.")
                return redirect('contests:detail', pk=pk)

        # Get all problems for this contest, ordered by order_in_contest
        contest_problems = ContestProblem.objects.filter(contest=contest).order_by('order_in_contest')
        
        current_problem = None
        if problem_pk:
            # Get the specific problem if problem_pk is provided
            current_problem = get_object_or_404(Problem, pk=problem_pk)
            # Ensure the requested problem actually belongs to this contest
            if not ContestProblem.objects.filter(contest=contest, problem=current_problem).exists():
                messages.error(request, "The requested problem is not part of this contest.")
                # Redirect to the default solve page for the contest, which will load the first problem
                return redirect('contests:solve_contest_problem_default', pk=pk) 
        elif contest_problems.exists():
            # If no problem_pk, default to the first problem in the contest
            current_problem = contest_problems.first().problem
        else:
            # Handle case where there are no problems in the contest
            messages.info(request, "This contest currently has no problems available.")
            current_problem = None # Ensure current_problem is explicitly None if no problems
        
        # Fetch user's submissions for this contest (all problems for the sidebar status)
        user_contest_submissions = []
        current_problem_submissions = []
        if request.user.is_authenticated:
            # All user submissions for this contest (for the sidebar status indicators)
            user_contest_submissions = ContestSubmission.objects.filter(
                participant=request.user,
                contest_problem__contest=contest
            ).order_by('-submitted_at')
            
            # Submissions for the current problem only (for the submissions list display)
            if current_problem:
                current_problem_submissions = ContestSubmission.objects.filter(
                    participant=request.user,
                    contest_problem__contest=contest,
                    contest_problem__problem=current_problem
                ).order_by('-submitted_at')

        context = {
            'contest': contest,
            'contest_problems': contest_problems, # List of ContestProblem objects
            'current_problem': current_problem, # The actual Problem object
            'user_contest_submissions': user_contest_submissions, # All submissions for sidebar
            'current_problem_submissions': current_problem_submissions, # Current problem submissions for list
            'now': timezone.now(), # Pass current time for timer calculation in template
        }
        return render(request, 'contests/contest_problem_solve.html', context)
        
    def post(self, request, pk, problem_pk, *args, **kwargs):
        """
        Handle code submission for a contest problem
        """
        contest = get_object_or_404(Contest, pk=pk)
        problem = get_object_or_404(Problem, pk=problem_pk)
        
        # Verify the problem belongs to the contest
        contest_problem = get_object_or_404(ContestProblem, contest=contest, problem=problem)
        
        # Check if the user is a participant
        if not contest.participants.filter(pk=request.user.pk).exists():
            messages.warning(request, f"You must be registered for '{contest.name}' to submit solutions.")
            return redirect('contests:detail', pk=pk)
        
        # Check if the contest is active
        if not contest.is_active():
            messages.error(request, f"'{contest.name}' is not active. You cannot submit solutions at this time.")
            return redirect('contests:detail', pk=pk)
        
        # Get submission data
        code = request.POST.get('code', '')
        language = request.POST.get('language', '')
        
        if not code or not language:
            messages.error(request, "Please provide both code and language for your submission.")
            return redirect('contests:solve_contest_problem', pk=pk, problem_pk=problem_pk)
        
        # Create a contest submission
        submission = ContestSubmission.objects.create(
            contest_problem=contest_problem,
            participant=request.user,
            code=code,
            language=language,
            # Status and final_verdict will be updated by the judging system
            status='queued',
            final_verdict='pending'
        )
        
        # TODO: Send to judging queue
        messages.success(request, "Your solution has been submitted and is being evaluated.")
        return redirect('contests:solve_contest_problem', pk=pk, problem_pk=problem_pk)
